{"ast":null,"code":"import _asyncToGenerator from \"C:/angular/Ecoleta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nclass SweetAlert2LoaderService {\n  swalProvider;\n  swalPromiseCache; // Using any because Angular metadata generator does not understand a pure TS type here\n\n  constructor(swalProvider) {\n    this.swalProvider = swalProvider;\n  }\n\n  get swal() {\n    if (!this.swalPromiseCache) {\n      this.preloadSweetAlertLibrary();\n    }\n\n    return this.swalPromiseCache;\n  }\n\n  preloadSweetAlertLibrary() {\n    if (this.swalPromiseCache) return;\n    const libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n    this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n    function isLoader(value) {\n      return typeof value === 'function' && value.version === undefined;\n    }\n\n    function isDefaultExport(value) {\n      return typeof value === 'function';\n    }\n  }\n\n  static ɵfac = function SweetAlert2LoaderService_Factory(t) {\n    return new (t || SweetAlert2LoaderService)(i0.ɵɵinject(swalProviderToken));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SweetAlert2LoaderService,\n    factory: SweetAlert2LoaderService.ɵfac\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [swalProviderToken]\n      }]\n    }];\n  }, null);\n})();\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\n\n\nclass SwalComponent {\n  sweetAlert2Loader;\n  moduleLevelFireOnInit;\n  moduleLevelDismissOnDestroy;\n  title;\n  titleText;\n  text;\n  html;\n  footer;\n  icon;\n  iconColor;\n  iconHtml;\n  backdrop;\n  toast;\n  target;\n  input;\n  width;\n  padding;\n  background;\n  position;\n  grow;\n  showClass;\n  hideClass;\n  customClass;\n  timer;\n  timerProgressBar;\n  heightAuto;\n  allowOutsideClick;\n  allowEscapeKey;\n  allowEnterKey;\n  stopKeydownPropagation;\n  keydownListenerCapture;\n  showConfirmButton;\n  showDenyButton;\n  showCancelButton;\n  confirmButtonText;\n  denyButtonText;\n  cancelButtonText;\n  confirmButtonColor;\n  denyButtonColor;\n  cancelButtonColor;\n  confirmButtonAriaLabel;\n  denyButtonAriaLabel;\n  cancelButtonAriaLabel;\n  buttonsStyling;\n  reverseButtons;\n  focusConfirm;\n  focusDeny;\n  focusCancel;\n  showCloseButton;\n  closeButtonHtml;\n  closeButtonAriaLabel;\n  loaderHtml;\n  showLoaderOnConfirm;\n  preConfirm;\n  preDeny;\n  imageUrl;\n  imageWidth;\n  imageHeight;\n  imageAlt;\n  inputLabel;\n  inputPlaceholder;\n  inputValue;\n  inputOptions;\n  inputAutoTrim;\n  inputAttributes;\n  inputValidator;\n  returnInputValueOnDeny;\n  validationMessage;\n  progressSteps;\n  currentProgressStep;\n  progressStepsDistance;\n  scrollbarPadding;\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n   *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n   *     previous properties you want to erase again.\n   *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n   *\n   * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n   */\n\n  set swalOptions(options) {\n    //=> Update properties\n    Object.assign(this, options); //=> Mark changed properties as touched\n\n    const touchedKeys = Object.keys(options);\n    touchedKeys.forEach(this.markTouched);\n  }\n  /**\n   * Computes the options object that will get passed to SweetAlert2.\n   * Only the properties that have been set at least once on this component will be returned.\n   * Mostly for internal usage.\n   */\n\n\n  get swalOptions() {\n    //=> We will compute the options object based on the option keys that are known to have changed.\n    //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n    //   avoiding side effects.\n    return [...this.touchedProps].reduce((obj, key) => ({ ...obj,\n      [key]: this[key]\n    }), {});\n  }\n  /**\n   * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n   * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n   *\n   * Example:\n   *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n   */\n\n\n  swalFireOnInit;\n  /**\n   * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n   * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n   */\n\n  swalDismissOnDestroy;\n\n  set swalVisible(visible) {\n    visible ? this.fire() : this.close();\n  }\n\n  get swalVisible() {\n    return this.isCurrentlyShown;\n  }\n  /**\n   * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n   */\n\n\n  willOpen = new EventEmitter();\n  /**\n   * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n   */\n\n  didOpen = new EventEmitter();\n  /**\n   * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n   * repainted on the screen).\n   * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n   * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n   * {@link willOpen}.\n   */\n\n  didRender = new EventEmitter();\n  /**\n   * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n   * being fired).\n   */\n\n  willClose = new EventEmitter();\n  /**\n   * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n   * another popup being fired).\n   */\n\n  didClose = new EventEmitter();\n  /**\n   * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n   * popup.\n   * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n   * {@link didDestroy} over {@link didClose}.\n   */\n\n  didDestroy = new EventEmitter();\n  /**\n   * Emits when the user clicks \"Confirm\".\n   * The event value ($event) can be either:\n   *  - by default, just `true`,\n   *  - when using {@link input}, the input value,\n   *  - when using {@link preConfirm}, the return value of this function.\n   *\n   * Example:\n   *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n   *\n   *     public handleConfirm(email: string): void {\n   *         // ... save user email\n   *     }\n   */\n\n  confirm = new EventEmitter();\n  /**\n   * Emits when the user clicks \"Deny\".\n   * This event bears no value.\n   * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n   * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n   *\n   * Example:\n   *     <swal (deny)=\"handleDeny()\"></swal>\n   *\n   *     public handleDeny(): void {\n   *     }\n   */\n\n  deny = new EventEmitter();\n  /**\n   * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n   * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n   * the modal was programmatically closed (through {@link close} for example).\n   *\n   * Example:\n   *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n   *\n   *     public handleDismiss(reason: DismissReason | undefined): void {\n   *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n   *         // ... do something\n   *     }\n   */\n\n  dismiss = new EventEmitter();\n  /**\n   * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n   * what options we have to send to {@link Swal.fire}.\n   */\n\n  touchedProps = new Set();\n  /**\n   * A function of signature `(propName: string): void` that adds a given property name to the list of\n   * touched properties, ie. {@link touchedProps}.\n   */\n\n  markTouched = this.touchedProps.add.bind(this.touchedProps);\n  /**\n   * Is the SweetAlert2 modal represented by this component currently opened?\n   */\n\n  isCurrentlyShown = false;\n\n  constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n    this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n  }\n  /**\n   * Angular lifecycle hook.\n   * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n   * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n   * causing no delay.\n   */\n\n\n  ngOnInit() {\n    //=> Preload SweetAlert2 library in case this component is activated.\n    this.sweetAlert2Loader.preloadSweetAlertLibrary();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Fires the modal, if the component or module is configured to do so.\n   */\n\n\n  ngAfterViewInit() {\n    const fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n    fireOnInit && this.fire();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n   */\n\n\n  ngOnChanges(changes) {\n    //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n    //   send it with the next fire() or update() calls.\n    Object.keys(changes) //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n    .filter(key => !key.startsWith('swal')).forEach(this.markTouched); //=> Eventually trigger re-render if the modal is open.\n\n    void this.update();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Closes the SweetAlert when the component is destroyed.\n   */\n\n\n  ngOnDestroy() {\n    //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n    const dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n    dismissOnDestroy && this.close();\n  }\n  /**\n   * Shows the SweetAlert.\n   *\n   * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n   * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n   */\n\n\n  fire() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const swal = yield _this.sweetAlert2Loader.swal;\n      const userOptions = _this.swalOptions; //=> Build the SweetAlert2 options\n\n      const options = { //=> Merge with calculated options set for that specific swal\n        ...userOptions,\n        //=> Handle modal lifecycle events\n        willOpen: composeHook(userOptions.willOpen, modalElement => {\n          _this.willOpen.emit({\n            modalElement\n          });\n        }),\n        didOpen: composeHook(userOptions.didOpen, modalElement => {\n          _this.isCurrentlyShown = true;\n\n          _this.didOpen.emit({\n            modalElement\n          });\n        }),\n        didRender: composeHook(userOptions.didRender, modalElement => {\n          _this.didRender.emit({\n            modalElement\n          });\n        }),\n        willClose: composeHook(userOptions.willClose, modalElement => {\n          _this.isCurrentlyShown = false;\n\n          _this.willClose.emit({\n            modalElement\n          });\n        }),\n        didClose: composeHook(userOptions.didClose, () => {\n          _this.didClose.emit();\n        }),\n        didDestroy: composeHook(userOptions.didDestroy, () => {\n          _this.didDestroy.emit();\n        })\n      }; //=> Show the Swal! And wait for confirmation or dimissal.\n\n      const result = yield swal.fire(options); //=> Emit on (confirm), (deny) or (dismiss)\n\n      switch (true) {\n        case result.isConfirmed:\n          _this.confirm.emit(result.value);\n\n          break;\n\n        case result.isDenied:\n          _this.deny.emit();\n\n          break;\n\n        case result.isDismissed:\n          _this.dismiss.emit(result.dismiss);\n\n          break;\n      }\n\n      return result;\n\n      function composeHook(userHook, libHook) {\n        return (...args) => (libHook(...args), userHook?.(...args));\n      }\n    })();\n  }\n  /**\n   * Closes the modal, if opened.\n   *\n   * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n   *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n   *               {@see Swal.close}.\n   */\n\n\n  close(result) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this2.isCurrentlyShown) return;\n      const swal = yield _this2.sweetAlert2Loader.swal;\n      swal.close(result);\n    })();\n  }\n  /**\n   * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n   * If the modal is not opened, the component options will simply be updated and that's it.\n   *\n   * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n   *\n   * @param options\n   */\n\n\n  update(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options) {\n        _this3.swalOptions = options;\n      }\n\n      if (!_this3.isCurrentlyShown) return;\n      const swal = yield _this3.sweetAlert2Loader.swal;\n      const allOptions = _this3.swalOptions;\n      const updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce((obj, key) => ({ ...obj,\n        [key]: allOptions[key]\n      }), {});\n      swal.update(updatableOptions);\n    })();\n  }\n\n  static ɵfac = function SwalComponent_Factory(t) {\n    return new (t || SwalComponent)(i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(fireOnInitToken), i0.ɵɵdirectiveInject(dismissOnDestroyToken));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SwalComponent,\n    selectors: [[\"swal\"]],\n    inputs: {\n      title: \"title\",\n      titleText: \"titleText\",\n      text: \"text\",\n      html: \"html\",\n      footer: \"footer\",\n      icon: \"icon\",\n      iconColor: \"iconColor\",\n      iconHtml: \"iconHtml\",\n      backdrop: \"backdrop\",\n      toast: \"toast\",\n      target: \"target\",\n      input: \"input\",\n      width: \"width\",\n      padding: \"padding\",\n      background: \"background\",\n      position: \"position\",\n      grow: \"grow\",\n      showClass: \"showClass\",\n      hideClass: \"hideClass\",\n      customClass: \"customClass\",\n      timer: \"timer\",\n      timerProgressBar: \"timerProgressBar\",\n      heightAuto: \"heightAuto\",\n      allowOutsideClick: \"allowOutsideClick\",\n      allowEscapeKey: \"allowEscapeKey\",\n      allowEnterKey: \"allowEnterKey\",\n      stopKeydownPropagation: \"stopKeydownPropagation\",\n      keydownListenerCapture: \"keydownListenerCapture\",\n      showConfirmButton: \"showConfirmButton\",\n      showDenyButton: \"showDenyButton\",\n      showCancelButton: \"showCancelButton\",\n      confirmButtonText: \"confirmButtonText\",\n      denyButtonText: \"denyButtonText\",\n      cancelButtonText: \"cancelButtonText\",\n      confirmButtonColor: \"confirmButtonColor\",\n      denyButtonColor: \"denyButtonColor\",\n      cancelButtonColor: \"cancelButtonColor\",\n      confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n      denyButtonAriaLabel: \"denyButtonAriaLabel\",\n      cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n      buttonsStyling: \"buttonsStyling\",\n      reverseButtons: \"reverseButtons\",\n      focusConfirm: \"focusConfirm\",\n      focusDeny: \"focusDeny\",\n      focusCancel: \"focusCancel\",\n      showCloseButton: \"showCloseButton\",\n      closeButtonHtml: \"closeButtonHtml\",\n      closeButtonAriaLabel: \"closeButtonAriaLabel\",\n      loaderHtml: \"loaderHtml\",\n      showLoaderOnConfirm: \"showLoaderOnConfirm\",\n      preConfirm: \"preConfirm\",\n      preDeny: \"preDeny\",\n      imageUrl: \"imageUrl\",\n      imageWidth: \"imageWidth\",\n      imageHeight: \"imageHeight\",\n      imageAlt: \"imageAlt\",\n      inputLabel: \"inputLabel\",\n      inputPlaceholder: \"inputPlaceholder\",\n      inputValue: \"inputValue\",\n      inputOptions: \"inputOptions\",\n      inputAutoTrim: \"inputAutoTrim\",\n      inputAttributes: \"inputAttributes\",\n      inputValidator: \"inputValidator\",\n      returnInputValueOnDeny: \"returnInputValueOnDeny\",\n      validationMessage: \"validationMessage\",\n      progressSteps: \"progressSteps\",\n      currentProgressStep: \"currentProgressStep\",\n      progressStepsDistance: \"progressStepsDistance\",\n      scrollbarPadding: \"scrollbarPadding\",\n      swalOptions: \"swalOptions\",\n      swalFireOnInit: \"swalFireOnInit\",\n      swalDismissOnDestroy: \"swalDismissOnDestroy\",\n      swalVisible: \"swalVisible\"\n    },\n    outputs: {\n      willOpen: \"willOpen\",\n      didOpen: \"didOpen\",\n      didRender: \"didRender\",\n      willClose: \"willClose\",\n      didClose: \"didClose\",\n      didDestroy: \"didDestroy\",\n      confirm: \"confirm\",\n      deny: \"deny\",\n      dismiss: \"dismiss\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function SwalComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: SweetAlert2LoaderService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [fireOnInitToken]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [dismissOnDestroyToken]\n      }]\n    }];\n  }, {\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconColor: [{\n      type: Input\n    }],\n    iconHtml: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    showClass: [{\n      type: Input\n    }],\n    hideClass: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    timerProgressBar: [{\n      type: Input\n    }],\n    heightAuto: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    stopKeydownPropagation: [{\n      type: Input\n    }],\n    keydownListenerCapture: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showDenyButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    denyButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    denyButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    denyButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusDeny: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonHtml: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    loaderHtml: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    preDeny: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    inputLabel: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    returnInputValueOnDeny: [{\n      type: Input\n    }],\n    validationMessage: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }],\n    scrollbarPadding: [{\n      type: Input\n    }],\n    swalOptions: [{\n      type: Input\n    }],\n    swalFireOnInit: [{\n      type: Input\n    }],\n    swalDismissOnDestroy: [{\n      type: Input\n    }],\n    swalVisible: [{\n      type: Input\n    }],\n    willOpen: [{\n      type: Output\n    }],\n    didOpen: [{\n      type: Output\n    }],\n    didRender: [{\n      type: Output\n    }],\n    willClose: [{\n      type: Output\n    }],\n    didClose: [{\n      type: Output\n    }],\n    didDestroy: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n\n\nclass SwalDirective {\n  viewContainerRef;\n  resolver;\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   */\n\n  set swal(options) {\n    if (options instanceof SwalComponent) {\n      this.swalInstance = options;\n    } else if (isArrayOptions(options)) {\n      this.swalOptions = {};\n      [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n    } else {\n      this.swalOptions = options;\n    }\n\n    function isArrayOptions(value) {\n      return Array.isArray(options);\n    }\n  }\n  /**\n   * Emits when the user clicks \"Confirm\".\n   * The event value ($event) can be either:\n   *  - by default, just `true`,\n   *  - when using {@link input}, the input value,\n   *  - when using {@link preConfirm}, the return value of this function.\n   *\n   * Example:\n   *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n   *\n   *     public handleConfirm(email: string): void {\n   *         // ... save user email\n   *     }\n   */\n\n\n  confirm = new EventEmitter();\n  /**\n   * Emits when the user clicks \"Deny\".\n   * This event bears no value.\n   * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n   * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n   *\n   * Example:\n   *     <swal (deny)=\"handleDeny()\"></swal>\n   *\n   *     public handleDeny(): void {\n   *     }\n   */\n\n  deny = new EventEmitter();\n  /**\n   * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n   * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n   * the modal was programmatically closed (through {@link dismiss} for example).\n   *\n   * Example:\n   *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n   *\n   *     public handleDismiss(reason: DismissReason | undefined): void {\n   *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n   *         // ... do something\n   *     }\n   */\n\n  dismiss = new EventEmitter();\n  /**\n   * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n   * options to it.\n   * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n   */\n\n  swalRef;\n  /**\n   * An instance of the <swal> component that this directive controls.\n   * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n   */\n\n  swalInstance;\n  /**\n   * Holds the native SweetAlert2 options.\n   * Empty when the user passed an existing SwalComponent instance.\n   */\n\n  swalOptions;\n\n  constructor(viewContainerRef, resolver) {\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n  }\n  /**\n   * OnInit lifecycle handler.\n   * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n   * (deny) and (dismiss) outputs to reemit on the directive.\n   */\n\n\n  ngOnInit() {\n    if (!this.swalInstance) {\n      const factory = this.resolver.resolveComponentFactory(SwalComponent);\n      this.swalRef = this.viewContainerRef.createComponent(factory);\n      this.swalInstance = this.swalRef.instance;\n    }\n  }\n  /**\n   * OnDestroy lifecycle handler.\n   * Destroys the dynamically-created SwalComponent.\n   */\n\n\n  ngOnDestroy() {\n    if (this.swalRef) {\n      this.swalRef.destroy();\n    }\n  }\n  /**\n   * Click handler.\n   * The directive listens for onclick events on its host element.\n   * When this happens, it shows the <swal> attached to this directive.\n   */\n\n\n  onClick(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    if (!this.swalInstance) return;\n\n    if (this.swalOptions) {\n      this.swalInstance.swalOptions = this.swalOptions;\n    }\n\n    const swalClosed = new Subject();\n    this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n    this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n    this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n    this.swalInstance.fire().then(() => swalClosed.next());\n  }\n\n  static ɵfac = function SwalDirective_Factory(t) {\n    return new (t || SwalDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SwalDirective,\n    selectors: [[\"\", \"swal\", \"\"]],\n    hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    },\n    inputs: {\n      swal: \"swal\"\n    },\n    outputs: {\n      confirm: \"confirm\",\n      deny: \"deny\",\n      dismiss: \"dismiss\"\n    }\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }];\n  }, {\n    swal: [{\n      type: Input\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n\n\nclass SwalPortalComponent {\n  template = null;\n  static ɵfac = function SwalPortalComponent_Factory(t) {\n    return new (t || SwalPortalComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SwalPortalComponent,\n    selectors: [[\"swal-portal\"]],\n    inputs: {\n      template: \"template\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngTemplateOutlet\"]],\n    template: function SwalPortalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n      }\n    },\n    dependencies: [i1.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal-portal',\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n\n\nclass SwalPortalTargets {\n  /**\n   * Targets the modal close button block contents.\n   */\n  closeButton = {\n    element: swal => swal.getCloseButton(),\n    options: {\n      showCloseButton: true\n    }\n  };\n  /**\n   * Targets the modal title block contents.\n   */\n\n  title = {\n    element: swal => swal.getTitle(),\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      title: ' '\n    }\n  };\n  /**\n   * Targets the modal text block contents (that is another block inside the first content block, so you can still\n   * use other modal features like Swal inputs, that are situated inside that parent content block).\n   */\n\n  content = {\n    element: swal => swal.getHtmlContainer(),\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      text: ' '\n    }\n  };\n  /**\n   * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n   * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n   *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n   *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n   *     performance of everyone, for a relatively rare use case.\n   */\n\n  actions = {\n    element: swal => swal.getActions(),\n    // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the confirm button contents, replacing the text inside it (not the button itself)\n   */\n\n  confirmButton = {\n    element: swal => swal.getConfirmButton(),\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the deny button contents, replacing the text inside it (not the button itself)\n   */\n\n  denyButton = {\n    element: swal => swal.getDenyButton(),\n    options: {\n      showDenyButton: true\n    }\n  };\n  /**\n   * Targets the cancel button contents, replacing the text inside it (not the button itself)\n   */\n\n  cancelButton = {\n    element: swal => swal.getCancelButton(),\n    options: {\n      showCancelButton: true\n    }\n  };\n  /**\n   * Targets the modal footer contents.\n   */\n\n  footer = {\n    element: swal => swal.getFooter(),\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      footer: ' '\n    }\n  };\n  static ɵfac = function SwalPortalTargets_Factory(t) {\n    return new (t || SwalPortalTargets)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SwalPortalTargets,\n    factory: SwalPortalTargets.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalTargets, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n\n\nclass SwalPortalDirective {\n  resolver;\n  injector;\n  app;\n  templateRef;\n  sweetAlert2Loader;\n  swalTargets;\n  swalComponent;\n  /**\n   * Takes a portal target or nothing (then it will target the text content zone by default).\n   *\n   * See the {@link SwalPortalTargets} service to see the available targets.\n   * See the class doc block for more informations.\n   */\n\n  target;\n  /**\n   * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n   */\n\n  portalComponentRef;\n  destroyed = new Subject();\n\n  constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n  }\n  /**\n   * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n   * that will receive the consumer's template.\n   */\n\n\n  ngOnInit() {\n    // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n    this.target = this.target || this.swalTargets.content; //=> Apply the options provided by the target definition\n\n    void this.swalComponent.update(this.target.options); //=> Subscribe to a few hooks frm the parent SwalComponent.\n\n    this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n    this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n    this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n  }\n  /**\n   * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n   * parent SwalComponent events.\n   */\n\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n  /**\n   * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n   * {@link willOpenHook}), or after Swal.update() is called.\n   * This is a good place to render, or re-render, our portal contents.\n   */\n\n\n  didRenderHook() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      //=> Ensure the portal component is created\n      if (!_this4.portalComponentRef) {\n        _this4.portalComponentRef = _this4.createPortalComponent();\n      } //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n      // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n      // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n      // the portal component is fully synchronous, causing no blinks in the modal contents.\n\n\n      const swal = yield _this4.sweetAlert2Loader.swal; //=> Find target element\n\n      const targetEl = _this4.target.element(swal);\n\n      if (!targetEl) return; //=> Replace target's contents with our component\n      // https://jsperf.com/innerhtml-vs-removechild/15\n\n      while (targetEl.firstChild) {\n        targetEl.removeChild(targetEl.firstChild);\n      }\n\n      targetEl.appendChild(_this4.portalComponentRef.location.nativeElement);\n    })();\n  }\n  /**\n   * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n   * This is a good place to declare our detached view to the Angular app.\n   */\n\n\n  willOpenHook() {\n    if (!this.portalComponentRef) return; //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n\n    this.app.attachView(this.portalComponentRef.hostView);\n  }\n  /**\n   * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n   * This is a good place to detach and destroy our content, that is not visible anymore.\n   */\n\n\n  didDestroyHook() {\n    if (!this.portalComponentRef) return; //=> Detach the portal component from the app and destroy it\n\n    this.app.detachView(this.portalComponentRef.hostView);\n    this.portalComponentRef.destroy();\n    this.portalComponentRef = void 0;\n  }\n  /**\n   * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n   */\n\n\n  createPortalComponent() {\n    //=> Create the SwalPortalComponent that will hold our content\n    const factory = this.resolver.resolveComponentFactory(SwalPortalComponent); // Yes, we do not use the third argument that would directly use the target as the component's view\n    // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n    // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n    // able to restore it at any moment, ie. after the modal has been re-rendered.\n\n    const componentRef = factory.create(this.injector, []); //=> Apply the consumer's template on the component\n\n    componentRef.instance.template = this.templateRef;\n    return componentRef;\n  }\n\n  static ɵfac = function SwalPortalDirective_Factory(t) {\n    return new (t || SwalPortalDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(SwalPortalTargets), i0.ɵɵdirectiveInject(SwalComponent, 1));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SwalPortalDirective,\n    selectors: [[\"\", \"swalPortal\", \"\"]],\n    inputs: {\n      target: [\"swalPortal\", \"target\"]\n    }\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPortal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: SweetAlert2LoaderService\n    }, {\n      type: SwalPortalTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    target: [{\n      type: Input,\n      args: ['swalPortal']\n    }]\n  });\n})();\n\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\n\nclass SweetAlert2Module {\n  static forRoot(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal || provideDefaultSwal\n      }, {\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit || false\n      }, {\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy || true\n      }]\n    };\n  }\n\n  static forChild(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [...(options.provideSwal ? [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal\n      }] : []), ...(options.fireOnInit !== undefined ? [{\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit\n      }] : []), ...(options.dismissOnDestroy !== undefined ? [{\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy\n      }] : [])]\n    };\n  }\n\n  static ɵfac = function SweetAlert2Module_Factory(t) {\n    return new (t || SweetAlert2Module)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SweetAlert2Module\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPortalDirective, SwalDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","Directive","HostListener","Host","NgModule","Subject","takeUntil","i1","CommonModule","swalProviderToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","swalProvider","swalPromiseCache","constructor","swal","preloadSweetAlertLibrary","libPromise","isLoader","Promise","resolve","then","value","isDefaultExport","default","version","undefined","ɵfac","ɵprov","type","decorators","args","SwalComponent","sweetAlert2Loader","moduleLevelFireOnInit","moduleLevelDismissOnDestroy","title","titleText","text","html","footer","icon","iconColor","iconHtml","backdrop","toast","target","input","width","padding","background","position","grow","showClass","hideClass","customClass","timer","timerProgressBar","heightAuto","allowOutsideClick","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","showConfirmButton","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","cancelButtonText","confirmButtonColor","denyButtonColor","cancelButtonColor","confirmButtonAriaLabel","denyButtonAriaLabel","cancelButtonAriaLabel","buttonsStyling","reverseButtons","focusConfirm","focusDeny","focusCancel","showCloseButton","closeButtonHtml","closeButtonAriaLabel","loaderHtml","showLoaderOnConfirm","preConfirm","preDeny","imageUrl","imageWidth","imageHeight","imageAlt","inputLabel","inputPlaceholder","inputValue","inputOptions","inputAutoTrim","inputAttributes","inputValidator","returnInputValueOnDeny","validationMessage","progressSteps","currentProgressStep","progressStepsDistance","scrollbarPadding","swalOptions","options","Object","assign","touchedKeys","keys","forEach","markTouched","touchedProps","reduce","obj","key","swalFireOnInit","swalDismissOnDestroy","swalVisible","visible","fire","close","isCurrentlyShown","willOpen","didOpen","didRender","willClose","didClose","didDestroy","confirm","deny","dismiss","Set","add","bind","ngOnInit","ngAfterViewInit","fireOnInit","ngOnChanges","changes","filter","startsWith","update","ngOnDestroy","dismissOnDestroy","userOptions","composeHook","modalElement","emit","result","isConfirmed","isDenied","isDismissed","userHook","libHook","allOptions","updatableOptions","isUpdatableParameter","ɵcmp","selector","template","changeDetection","OnPush","SwalDirective","viewContainerRef","resolver","swalInstance","isArrayOptions","Array","isArray","swalRef","factory","resolveComponentFactory","createComponent","instance","destroy","onClick","event","preventDefault","stopImmediatePropagation","stopPropagation","swalClosed","asObservable","pipe","subscribe","v","next","ViewContainerRef","ComponentFactoryResolver","ɵdir","SwalPortalComponent","NgTemplateOutlet","SwalPortalTargets","closeButton","element","getCloseButton","getTitle","content","getHtmlContainer","actions","getActions","confirmButton","getConfirmButton","denyButton","getDenyButton","cancelButton","getCancelButton","getFooter","providedIn","SwalPortalDirective","injector","app","templateRef","swalTargets","swalComponent","portalComponentRef","destroyed","didRenderHook","willOpenHook","didDestroyHook","createPortalComponent","targetEl","firstChild","removeChild","appendChild","location","nativeElement","attachView","hostView","detachView","componentRef","create","Injector","ApplicationRef","TemplateRef","provideDefaultSwal","SweetAlert2Module","forRoot","ngModule","providers","provide","useValue","provideSwal","forChild","ɵmod","ɵinj","declarations","imports","exports"],"sources":["C:/angular/Ecoleta/node_modules/@sweetalert2/ngx-sweetalert2/fesm2022/sweetalert2-ngx-sweetalert2.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nclass SweetAlert2LoaderService {\n    swalProvider;\n    swalPromiseCache;\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    constructor(swalProvider) {\n        this.swalProvider = swalProvider;\n    }\n    get swal() {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n        return this.swalPromiseCache;\n    }\n    preloadSweetAlertLibrary() {\n        if (this.swalPromiseCache)\n            return;\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n        function isLoader(value) {\n            return typeof value === 'function' && value.version === undefined;\n        }\n        function isDefaultExport(value) {\n            return typeof value === 'function';\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2LoaderService, deps: [{ token: swalProviderToken }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2LoaderService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2LoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [swalProviderToken]\n                }] }]; } });\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\nclass SwalComponent {\n    sweetAlert2Loader;\n    moduleLevelFireOnInit;\n    moduleLevelDismissOnDestroy;\n    title;\n    titleText;\n    text;\n    html;\n    footer;\n    icon;\n    iconColor;\n    iconHtml;\n    backdrop;\n    toast;\n    target;\n    input;\n    width;\n    padding;\n    background;\n    position;\n    grow;\n    showClass;\n    hideClass;\n    customClass;\n    timer;\n    timerProgressBar;\n    heightAuto;\n    allowOutsideClick;\n    allowEscapeKey;\n    allowEnterKey;\n    stopKeydownPropagation;\n    keydownListenerCapture;\n    showConfirmButton;\n    showDenyButton;\n    showCancelButton;\n    confirmButtonText;\n    denyButtonText;\n    cancelButtonText;\n    confirmButtonColor;\n    denyButtonColor;\n    cancelButtonColor;\n    confirmButtonAriaLabel;\n    denyButtonAriaLabel;\n    cancelButtonAriaLabel;\n    buttonsStyling;\n    reverseButtons;\n    focusConfirm;\n    focusDeny;\n    focusCancel;\n    showCloseButton;\n    closeButtonHtml;\n    closeButtonAriaLabel;\n    loaderHtml;\n    showLoaderOnConfirm;\n    preConfirm;\n    preDeny;\n    imageUrl;\n    imageWidth;\n    imageHeight;\n    imageAlt;\n    inputLabel;\n    inputPlaceholder;\n    inputValue;\n    inputOptions;\n    inputAutoTrim;\n    inputAttributes;\n    inputValidator;\n    returnInputValueOnDeny;\n    validationMessage;\n    progressSteps;\n    currentProgressStep;\n    progressStepsDistance;\n    scrollbarPadding;\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    set swalOptions(options) {\n        //=> Update properties\n        Object.assign(this, options);\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options);\n        touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    get swalOptions() {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce((obj, key) => ({ ...obj, [key]: this[key] }), {});\n    }\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    swalFireOnInit;\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    swalDismissOnDestroy;\n    set swalVisible(visible) {\n        visible ? this.fire() : this.close();\n    }\n    get swalVisible() {\n        return this.isCurrentlyShown;\n    }\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    willOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    didOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n    didRender = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n    willClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n    didClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n    didDestroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    dismiss = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    isCurrentlyShown = false;\n    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ngOnInit() {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    ngAfterViewInit() {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n        fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    ngOnChanges(changes) {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key) => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    ngOnDestroy() {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n        dismissOnDestroy && this.close();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    async fire() {\n        const swal = await this.sweetAlert2Loader.swal;\n        const userOptions = this.swalOptions;\n        //=> Build the SweetAlert2 options\n        const options = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n            //=> Handle modal lifecycle events\n            willOpen: composeHook(userOptions.willOpen, (modalElement) => {\n                this.willOpen.emit({ modalElement });\n            }),\n            didOpen: composeHook(userOptions.didOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.didOpen.emit({ modalElement });\n            }),\n            didRender: composeHook(userOptions.didRender, (modalElement) => {\n                this.didRender.emit({ modalElement });\n            }),\n            willClose: composeHook(userOptions.willClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.willClose.emit({ modalElement });\n            }),\n            didClose: composeHook(userOptions.didClose, () => {\n                this.didClose.emit();\n            }),\n            didDestroy: composeHook(userOptions.didDestroy, () => {\n                this.didDestroy.emit();\n            })\n        };\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n        //=> Emit on (confirm), (deny) or (dismiss)\n        switch (true) {\n            case result.isConfirmed:\n                this.confirm.emit(result.value);\n                break;\n            case result.isDenied:\n                this.deny.emit();\n                break;\n            case result.isDismissed:\n                this.dismiss.emit(result.dismiss);\n                break;\n        }\n        return result;\n        function composeHook(userHook, libHook) {\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    async close(result) {\n        if (!this.isCurrentlyShown)\n            return;\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    async update(options) {\n        if (options) {\n            this.swalOptions = options;\n        }\n        if (!this.isCurrentlyShown)\n            return;\n        const swal = await this.sweetAlert2Loader.swal;\n        const allOptions = this.swalOptions;\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce((obj, key) => ({ ...obj, [key]: allOptions[key] }), {});\n        swal.update(updatableOptions);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalComponent, deps: [{ token: SweetAlert2LoaderService }, { token: fireOnInitToken }, { token: dismissOnDestroyToken }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: SwalComponent, selector: \"swal\", inputs: { title: \"title\", titleText: \"titleText\", text: \"text\", html: \"html\", footer: \"footer\", icon: \"icon\", iconColor: \"iconColor\", iconHtml: \"iconHtml\", backdrop: \"backdrop\", toast: \"toast\", target: \"target\", input: \"input\", width: \"width\", padding: \"padding\", background: \"background\", position: \"position\", grow: \"grow\", showClass: \"showClass\", hideClass: \"hideClass\", customClass: \"customClass\", timer: \"timer\", timerProgressBar: \"timerProgressBar\", heightAuto: \"heightAuto\", allowOutsideClick: \"allowOutsideClick\", allowEscapeKey: \"allowEscapeKey\", allowEnterKey: \"allowEnterKey\", stopKeydownPropagation: \"stopKeydownPropagation\", keydownListenerCapture: \"keydownListenerCapture\", showConfirmButton: \"showConfirmButton\", showDenyButton: \"showDenyButton\", showCancelButton: \"showCancelButton\", confirmButtonText: \"confirmButtonText\", denyButtonText: \"denyButtonText\", cancelButtonText: \"cancelButtonText\", confirmButtonColor: \"confirmButtonColor\", denyButtonColor: \"denyButtonColor\", cancelButtonColor: \"cancelButtonColor\", confirmButtonAriaLabel: \"confirmButtonAriaLabel\", denyButtonAriaLabel: \"denyButtonAriaLabel\", cancelButtonAriaLabel: \"cancelButtonAriaLabel\", buttonsStyling: \"buttonsStyling\", reverseButtons: \"reverseButtons\", focusConfirm: \"focusConfirm\", focusDeny: \"focusDeny\", focusCancel: \"focusCancel\", showCloseButton: \"showCloseButton\", closeButtonHtml: \"closeButtonHtml\", closeButtonAriaLabel: \"closeButtonAriaLabel\", loaderHtml: \"loaderHtml\", showLoaderOnConfirm: \"showLoaderOnConfirm\", preConfirm: \"preConfirm\", preDeny: \"preDeny\", imageUrl: \"imageUrl\", imageWidth: \"imageWidth\", imageHeight: \"imageHeight\", imageAlt: \"imageAlt\", inputLabel: \"inputLabel\", inputPlaceholder: \"inputPlaceholder\", inputValue: \"inputValue\", inputOptions: \"inputOptions\", inputAutoTrim: \"inputAutoTrim\", inputAttributes: \"inputAttributes\", inputValidator: \"inputValidator\", returnInputValueOnDeny: \"returnInputValueOnDeny\", validationMessage: \"validationMessage\", progressSteps: \"progressSteps\", currentProgressStep: \"currentProgressStep\", progressStepsDistance: \"progressStepsDistance\", scrollbarPadding: \"scrollbarPadding\", swalOptions: \"swalOptions\", swalFireOnInit: \"swalFireOnInit\", swalDismissOnDestroy: \"swalDismissOnDestroy\", swalVisible: \"swalVisible\" }, outputs: { willOpen: \"willOpen\", didOpen: \"didOpen\", didRender: \"didRender\", willClose: \"willClose\", didClose: \"didClose\", didDestroy: \"didDestroy\", confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal',\n                    template: '',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: SweetAlert2LoaderService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [fireOnInitToken]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [dismissOnDestroyToken]\n                }] }]; }, propDecorators: { title: [{\n                type: Input\n            }], titleText: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], html: [{\n                type: Input\n            }], footer: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], iconColor: [{\n                type: Input\n            }], iconHtml: [{\n                type: Input\n            }], backdrop: [{\n                type: Input\n            }], toast: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], input: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], padding: [{\n                type: Input\n            }], background: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], grow: [{\n                type: Input\n            }], showClass: [{\n                type: Input\n            }], hideClass: [{\n                type: Input\n            }], customClass: [{\n                type: Input\n            }], timer: [{\n                type: Input\n            }], timerProgressBar: [{\n                type: Input\n            }], heightAuto: [{\n                type: Input\n            }], allowOutsideClick: [{\n                type: Input\n            }], allowEscapeKey: [{\n                type: Input\n            }], allowEnterKey: [{\n                type: Input\n            }], stopKeydownPropagation: [{\n                type: Input\n            }], keydownListenerCapture: [{\n                type: Input\n            }], showConfirmButton: [{\n                type: Input\n            }], showDenyButton: [{\n                type: Input\n            }], showCancelButton: [{\n                type: Input\n            }], confirmButtonText: [{\n                type: Input\n            }], denyButtonText: [{\n                type: Input\n            }], cancelButtonText: [{\n                type: Input\n            }], confirmButtonColor: [{\n                type: Input\n            }], denyButtonColor: [{\n                type: Input\n            }], cancelButtonColor: [{\n                type: Input\n            }], confirmButtonAriaLabel: [{\n                type: Input\n            }], denyButtonAriaLabel: [{\n                type: Input\n            }], cancelButtonAriaLabel: [{\n                type: Input\n            }], buttonsStyling: [{\n                type: Input\n            }], reverseButtons: [{\n                type: Input\n            }], focusConfirm: [{\n                type: Input\n            }], focusDeny: [{\n                type: Input\n            }], focusCancel: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], closeButtonHtml: [{\n                type: Input\n            }], closeButtonAriaLabel: [{\n                type: Input\n            }], loaderHtml: [{\n                type: Input\n            }], showLoaderOnConfirm: [{\n                type: Input\n            }], preConfirm: [{\n                type: Input\n            }], preDeny: [{\n                type: Input\n            }], imageUrl: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageAlt: [{\n                type: Input\n            }], inputLabel: [{\n                type: Input\n            }], inputPlaceholder: [{\n                type: Input\n            }], inputValue: [{\n                type: Input\n            }], inputOptions: [{\n                type: Input\n            }], inputAutoTrim: [{\n                type: Input\n            }], inputAttributes: [{\n                type: Input\n            }], inputValidator: [{\n                type: Input\n            }], returnInputValueOnDeny: [{\n                type: Input\n            }], validationMessage: [{\n                type: Input\n            }], progressSteps: [{\n                type: Input\n            }], currentProgressStep: [{\n                type: Input\n            }], progressStepsDistance: [{\n                type: Input\n            }], scrollbarPadding: [{\n                type: Input\n            }], swalOptions: [{\n                type: Input\n            }], swalFireOnInit: [{\n                type: Input\n            }], swalDismissOnDestroy: [{\n                type: Input\n            }], swalVisible: [{\n                type: Input\n            }], willOpen: [{\n                type: Output\n            }], didOpen: [{\n                type: Output\n            }], didRender: [{\n                type: Output\n            }], willClose: [{\n                type: Output\n            }], didClose: [{\n                type: Output\n            }], didDestroy: [{\n                type: Output\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }] } });\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nclass SwalDirective {\n    viewContainerRef;\n    resolver;\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    set swal(options) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        }\n        else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        }\n        else {\n            this.swalOptions = options;\n        }\n        function isArrayOptions(value) {\n            return Array.isArray(options);\n        }\n    }\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    dismiss = new EventEmitter();\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    swalRef;\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    swalInstance;\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    swalOptions;\n    constructor(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    ngOnInit() {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    ngOnDestroy() {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (!this.swalInstance)\n            return;\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n        const swalClosed = new Subject();\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n        this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.5\", type: SwalDirective, selector: \"[swal]\", inputs: { swal: \"swal\" }, outputs: { confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, host: { listeners: { \"click\": \"onClick($event)\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swal]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { swal: [{\n                type: Input\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nclass SwalPortalComponent {\n    template = null;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: SwalPortalComponent, selector: \"swal-portal\", inputs: { template: \"template\" }, ngImport: i0, template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>', isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal-portal',\n                    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { template: [{\n                type: Input\n            }] } });\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nclass SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    closeButton = {\n        element: swal => swal.getCloseButton(),\n        options: { showCloseButton: true }\n    };\n    /**\n     * Targets the modal title block contents.\n     */\n    title = {\n        element: swal => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: ' ' }\n    };\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    content = {\n        element: swal => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: ' ' }\n    };\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    actions = {\n        element: swal => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true }\n    };\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    confirmButton = {\n        element: swal => swal.getConfirmButton(),\n        options: { showConfirmButton: true }\n    };\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n    denyButton = {\n        element: swal => swal.getDenyButton(),\n        options: { showDenyButton: true }\n    };\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    cancelButton = {\n        element: swal => swal.getCancelButton(),\n        options: { showCancelButton: true }\n    };\n    /**\n     * Targets the modal footer contents.\n     */\n    footer = {\n        element: swal => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: ' ' }\n    };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalTargets, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalTargets, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalTargets, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nclass SwalPortalDirective {\n    resolver;\n    injector;\n    app;\n    templateRef;\n    sweetAlert2Loader;\n    swalTargets;\n    swalComponent;\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    target;\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    portalComponentRef;\n    destroyed = new Subject();\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    ngOnInit() {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n        this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n        this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    async didRenderHook() {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n        //=> Find target element\n        const targetEl = this.target.element(swal);\n        if (!targetEl)\n            return;\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    willOpenHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    didDestroyHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    createPortalComponent() {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n        return componentRef;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalDirective, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }, { token: i0.TemplateRef }, { token: SweetAlert2LoaderService }, { token: SwalPortalTargets }, { token: SwalComponent, host: true }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.5\", type: SwalPortalDirective, selector: \"[swalPortal]\", inputs: { target: [\"swalPortal\", \"target\"] }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SwalPortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swalPortal]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }, { type: i0.TemplateRef }, { type: SweetAlert2LoaderService }, { type: SwalPortalTargets }, { type: SwalComponent, decorators: [{\n                    type: Host\n                }] }]; }, propDecorators: { target: [{\n                type: Input,\n                args: ['swalPortal']\n            }] } });\n\nfunction provideDefaultSwal() {\n    return import('sweetalert2');\n}\nclass SweetAlert2Module {\n    static forRoot(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n    static forChild(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2Module, declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent], imports: [CommonModule], exports: [SwalComponent, SwalPortalDirective, SwalDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2Module, imports: [CommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: SweetAlert2Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        SwalComponent, SwalPortalDirective, SwalDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}